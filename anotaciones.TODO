2013-07-20
  ☐ SQL:
    CREATE TABLE facturacion_ventas_remision
    (
      id_venta bigserial NOT NULL,
      id_cliente bigint NOT NULL,
      id_empresa integer NOT NULL,
      folio bigint NOT NULL,
      fecha timestamp with time zone NOT NULL DEFAULT now(),
      subtotal double precision NOT NULL DEFAULT 0,
      importe_iva double precision NOT NULL DEFAULT 0,
      total double precision NOT NULL DEFAULT 0,
      total_letra character varying(250) NOT NULL,
      forma_pago character varying(80) NOT NULL DEFAULT 'Pago en una sola exhibición'::character varying,
      condicion_pago character varying(2) NOT NULL DEFAULT 'co'::character varying,
      plazo_credito integer NOT NULL DEFAULT 0,
      observaciones text NOT NULL DEFAULT ''::text,
      status character varying(2) NOT NULL DEFAULT 'pa'::character varying,
      metodo_pago character varying(40) NOT NULL DEFAULT 'efectivo'::character varying, -- cheque, tarjeta de crédito o debito, depósito en cuenta
      CONSTRAINT facturacion_ventas_remision_pkey PRIMARY KEY (id_venta),
      CONSTRAINT facturacion_ventas_remision_id_cliente_fkey FOREIGN KEY (id_cliente)
          REFERENCES clientes (id_cliente) MATCH SIMPLE
          ON UPDATE CASCADE ON DELETE CASCADE,
      CONSTRAINT facturacion_ventas_remision_id_empresa_fkey FOREIGN KEY (id_empresa)
          REFERENCES empresas (id_empresa) MATCH SIMPLE
          ON UPDATE CASCADE ON DELETE CASCADE
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE facturacion_ventas_remision OWNER TO programa;
    COMMENT ON COLUMN facturacion_ventas_remision.metodo_pago IS 'cheque, tarjeta de crédito o debito, depósito en cuenta';

    CREATE TABLE facturacion_ventas_remision_cliente
    (
      id_venta bigint NOT NULL,
      nombre character varying(130),
      rfc character varying(13),
      calle character varying(60),
      no_exterior character varying(7),
      no_interior character varying(7),
      colonia character varying(60),
      localidad character varying(45),
      municipio character varying(45),
      estado character varying(45),
      cp character varying(10),
      pais character varying(60),
      CONSTRAINT facturacion_ventas_remision_productos_pkey PRIMARY KEY (id_venta),
      CONSTRAINT facturacion_ventas_remision_productos_id_venta_fkey FOREIGN KEY (id_venta)
          REFERENCES facturacion_ventas_remision (id_venta) MATCH SIMPLE
          ON UPDATE CASCADE ON DELETE CASCADE
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE facturacion_ventas_remision_cliente OWNER TO programa;

    CREATE TABLE facturacion_ventas_remision_productos
    (
      id_venta bigint NOT NULL,
      id_clasificacion integer,
      num_row integer NOT NULL DEFAULT 0,
      cantidad real NOT NULL DEFAULT 0,
      descripcion text,
      precio_unitario double precision NOT NULL DEFAULT 0,
      importe double precision NOT NULL,
      unidad character varying(15) DEFAULT 'No aplica'::character varying,
      CONSTRAINT facturacion_ventas_remision_productos_pkey1 PRIMARY KEY (id_venta, num_row),
      CONSTRAINT facturacion_ventas_remision_productos_id_clasificacion_fkey FOREIGN KEY (id_clasificacion)
          REFERENCES clasificaciones (id_clasificacion) MATCH SIMPLE
          ON UPDATE CASCADE ON DELETE CASCADE,
      CONSTRAINT facturacion_ventas_remision_productos_id_venta_fkey1 FOREIGN KEY (id_venta)
          REFERENCES facturacion_ventas_remision (id_venta) MATCH SIMPLE
          ON UPDATE CASCADE ON DELETE CASCADE
    )
    WITH (
      OIDS=FALSE
    );
    ALTER TABLE facturacion_ventas_remision_productos OWNER TO programa;


2013-07-17
      CHOFERES:
           ✔ Agregar los campos faltantes. @done (13-07-15 17:52)

                SQL:
                  telefono character varying(15),
                  id_nextel character varying(20),
                  no_licencia character varying(50),
                  no_ife character varying(30),
                  url_licencia character varying(150),
                  url_ife character varying(150),

      CAMIONES:
           ✔ Agregar los campos faltantes. @done (13-07-15 18:06)

                SQL:
                  color character varying(15),

2013-07-12
  ✔ SQL @done (13-07-19 13:31)
      -Agregar los campos en empresas
        cer_org character varying(90),
        cer character varying(90),
        key_path character varying(90),
        pass character varying(20),
        cfdi_version character varying(6) NOT NULL DEFAULT 3.2,
        cer_caduca date,

        -Agregar los campos en clientes
        dias_credito integer NOT NULL DEFAULT 0,

        CREATE TABLE lineas_transporte
        (
          id_linea serial NOT NULL,
          nombre character varying(100) NOT NULL,
          telefonos character varying(70),
          id character varying(30),
          status boolean NOT NULL DEFAULT true,
          CONSTRAINT lineas_transporte_pkey PRIMARY KEY (id_linea)
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE lineas_transporte OWNER TO programa;

        CREATE TABLE rastria_documentos
        (
          id_documento serial NOT NULL,
          nombre character varying(100) NOT NULL,
          url_form character varying(80),
          url_print character varying(80),
          status boolean NOT NULL DEFAULT true,
          orden integer NOT NULL, -- indica la prioridad (orden) de los documentos como se tienen que ir haciendo
          CONSTRAINT rastria_documentos_pkey PRIMARY KEY (id_documento)
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE rastria_documentos OWNER TO programa;
        COMMENT ON COLUMN rastria_documentos.orden IS 'indica la prioridad (orden) de los documentos como se tienen que ir haciendo';

        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('MANIFIESTO DEL CHOFER', NULL, NULL, true, 1);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('CHOFER FOTO FIRMA MANIFIESTO', NULL, NULL, true, 2);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('ACOMODO DEL EMBARQUE', NULL, NULL, true, 3);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('CHOFER COPIA DEL IFE', NULL, NULL, true, 4);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('CHOFER COPIA LICENCIA', NULL, NULL, true, 5);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('SEGURO CAMION', NULL, NULL, true, 6);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('CERTIFICADO DE TLC', NULL, NULL, true, 7);
        INSERT INTO rastria_documentos (nombre, url_form, url_print, status, orden) VALUES ('MANIFIESTO DEL CAMION', NULL, NULL, true, 8);

        CREATE TABLE facturacion_series_folios
        (
          id_serie_folio serial NOT NULL,
          id_empresa integer NOT NULL,
          serie character varying(30),
          no_aprobacion bigint NOT NULL,
          folio_inicio bigint NOT NULL,
          folio_fin bigint NOT NULL,
          leyenda text,
          leyenda1 text,
          leyenda2 text,
          es_nota_credito boolean NOT NULL DEFAULT false, -- indica si los folios son notas de credito
          ano_aprobacion date NOT NULL,
          CONSTRAINT facturacion_series_folios_pkey PRIMARY KEY (id_serie_folio),
          CONSTRAINT facturacion_series_folios_id_empresa_fkey FOREIGN KEY (id_empresa)
              REFERENCES empresas (id_empresa) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_series_folios OWNER TO programa;
        COMMENT ON COLUMN facturacion_series_folios.es_nota_credito IS 'indica si los folios son notas de credito';

        CREATE TABLE facturacion
        (
          id_factura bigserial NOT NULL,
          id_cliente bigint NOT NULL,
          id_empresa integer NOT NULL,
          "version" character varying(6) NOT NULL,
          serie character varying(30) NOT NULL,
          folio bigint NOT NULL,
          fecha timestamp with time zone NOT NULL DEFAULT now(),
          subtotal double precision NOT NULL DEFAULT 0,
          importe_iva double precision NOT NULL DEFAULT 0,
          total double precision NOT NULL DEFAULT 0,
          total_letra character varying(250) NOT NULL,
          no_aprobacion bigint NOT NULL,
          ano_aprobacion character varying(4) NOT NULL,
          tipo_comprobante character varying(10) NOT NULL DEFAULT 'ingreso'::character varying, -- egreso o ingreso
          forma_pago character varying(80) NOT NULL DEFAULT 'Pago en una sola exhibición'::character varying, -- Pago en una sola exhibición, Parcialidad 1 de X
          metodo_pago character varying(40) NOT NULL DEFAULT 'efectivo'::character varying, -- cheque, tarjeta de crédito o debito, depósito en cuenta
          metodo_pago_digitos character varying(20) NOT NULL DEFAULT 'No identificado'::character varying, -- Los ultimos 4 digitos del cheque, tarjeta o cuenta en metodo de pago
          no_certificado character varying(100) NOT NULL,
          cadena_original text NOT NULL,
          sello character varying(250) NOT NULL,
          certificado text NOT NULL,
          condicion_pago character varying(2) NOT NULL DEFAULT 'co'::character varying, -- Corresponde a si el documento es a cr:credito o co:contado
          plazo_credito integer NOT NULL DEFAULT 0,
          observaciones text NOT NULL DEFAULT ''::text,
          status character varying(2) NOT NULL DEFAULT 'pa'::character varying, -- Corresponde al status de la factura p:pendiente, pa:pagada, ca:cancelada
          id_nc bigint, -- es el id de la factura que esta ligada la nota de credito
          CONSTRAINT facturacion_pkey PRIMARY KEY (id_factura),
          CONSTRAINT facturacion_id_cliente_fkey FOREIGN KEY (id_cliente)
              REFERENCES clientes (id_cliente) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE,
          CONSTRAINT facturacion_id_empresa_fkey FOREIGN KEY (id_empresa)
              REFERENCES empresas (id_empresa) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion OWNER TO programa;
        COMMENT ON COLUMN facturacion.tipo_comprobante IS 'egreso o ingreso';
        COMMENT ON COLUMN facturacion.forma_pago IS 'Pago en una sola exhibición, Parcialidad 1 de X';
        COMMENT ON COLUMN facturacion.metodo_pago IS 'cheque, tarjeta de crédito o debito, depósito en cuenta';
        COMMENT ON COLUMN facturacion.metodo_pago_digitos IS 'Los ultimos 4 digitos del cheque, tarjeta o cuenta en metodo de pago';
        COMMENT ON COLUMN facturacion.condicion_pago IS 'Corresponde a si el documento es a cr:credito o co:contado';
        COMMENT ON COLUMN facturacion.status IS 'Corresponde al status de la factura p:pendiente, pa:pagada, ca:cancelada';
        COMMENT ON COLUMN facturacion.id_nc IS 'es el id de la factura que esta ligada la nota de credito';

        CREATE TABLE facturacion_cliente
        (
          id_factura bigint NOT NULL,
          nombre character varying(130),
          rfc character varying(13),
          calle character varying(60),
          no_exterior character varying(7),
          no_interior character varying(7),
          colonia character varying(60),
          localidad character varying(45),
          municipio character varying(45),
          estado character varying(45),
          cp character varying(10),
          pais character varying(60),
          CONSTRAINT facturacion_cliente_pkey PRIMARY KEY (id_factura),
          CONSTRAINT facturacion_cliente_id_factura_fkey FOREIGN KEY (id_factura)
              REFERENCES facturacion (id_factura) MATCH SIMPLE
              ON UPDATE NO ACTION ON DELETE NO ACTION
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_cliente OWNER TO programa;

        CREATE TABLE facturacion_productos
        (
          id_factura bigint NOT NULL,
          id_clasificacion integer,
          num_row integer NOT NULL DEFAULT 0,
          cantidad real NOT NULL DEFAULT 0,
          descripcion text,
          precio_unitario double precision NOT NULL DEFAULT 0,
          importe double precision NOT NULL,
          iva real NOT NULL DEFAULT 0,
          unidad character varying(15) DEFAULT 'No aplica'::character varying,
          retencion_iva real NOT NULL DEFAULT 0,
          CONSTRAINT facturacion_productos_pkey PRIMARY KEY (id_factura, num_row),
          CONSTRAINT facturacion_productos_id_clasificacion_fkey FOREIGN KEY (id_clasificacion)
              REFERENCES clasificaciones (id_clasificacion) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE,
          CONSTRAINT facturacion_productos_id_factura_fkey FOREIGN KEY (id_factura)
              REFERENCES facturacion (id_factura) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_productos OWNER TO programa;

        CREATE TABLE facturacion_documentos
        (
          id_factura bigint NOT NULL,
          id_documento integer NOT NULL,
          data text,
          status boolean NOT NULL DEFAULT false,
          CONSTRAINT facturacion_documentos_pkey PRIMARY KEY (id_factura, id_documento),
          CONSTRAINT facturacion_documentos_id_documento_fkey FOREIGN KEY (id_documento)
              REFERENCES rastria_documentos (id_documento) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE,
          CONSTRAINT facturacion_documentos_id_factura_fkey FOREIGN KEY (id_factura)
              REFERENCES facturacion (id_factura) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_documentos OWNER TO programa;

        CREATE TABLE facturacion_doc_embarque
        (
          id_embarque bigserial NOT NULL,
          id_documento integer NOT NULL,
          id_factura bigint NOT NULL,
          fecha_carga timestamp with time zone,
          fecha_embarque timestamp with time zone,
          ctrl_embarque character varying(15),
          CONSTRAINT facturacion_doc_embarque_pkey PRIMARY KEY (id_embarque),
          CONSTRAINT facturacion_doc_embarque_id_documento_fkey FOREIGN KEY (id_documento)
              REFERENCES rastria_documentos (id_documento) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE,
          CONSTRAINT facturacion_doc_embarque_id_factura_fkey FOREIGN KEY (id_factura)
              REFERENCES facturacion (id_factura) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_doc_embarque OWNER TO programa;

        CREATE TABLE facturacion_doc_embarque_pallets
        (
          id_embarque bigint NOT NULL,
          no_posicion integer NOT NULL DEFAULT 0,
          id_pallet bigint,
          marca character varying(50),
          descripcion character varying(80), -- para cuando la posicion del trailer quede sin nada o ponga otra fruta (coco, platano, etc)
          CONSTRAINT facturacion_doc_embarque_pallets_pkey PRIMARY KEY (id_embarque, no_posicion),
          CONSTRAINT facturacion_doc_embarque_pallets_id_pallet_fkey FOREIGN KEY (id_pallet)
              REFERENCES rastria_pallets (id_pallet) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE facturacion_doc_embarque_pallets OWNER TO programa;
        COMMENT ON COLUMN facturacion_doc_embarque_pallets.descripcion IS 'para cuando la posicion del trailer quede sin nada o ponga otra fruta (coco, platano, etc)';

        CREATE TABLE clientes_documentos
        (
          id_cliente bigint NOT NULL,
          id_documento integer NOT NULL,
          CONSTRAINT clientes_documentos_pkey PRIMARY KEY (id_cliente, id_documento),
          CONSTRAINT clientes_documentos_id_cliente_fkey FOREIGN KEY (id_cliente)
              REFERENCES clientes (id_cliente) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE,
          CONSTRAINT clientes_documentos_id_documento_fkey FOREIGN KEY (id_documento)
              REFERENCES rastria_documentos (id_documento) MATCH SIMPLE
              ON UPDATE CASCADE ON DELETE CASCADE
        )
        WITH (
          OIDS=FALSE
        );
        ALTER TABLE clientes_documentos OWNER TO programa;

     INSERT INTO clasificaciones(id_area, nombre)
         VALUES
           (1, 'LIMON VERDE S/EXTRA (CAJA DE MADERA)'), (1, 'LIMON VERDE S/EXTRA (CAJA DE CARTON)'), (1, 'LIMON VERDE S/EXTRA (CAJA DE PLASTICO)'), (1, 'LIMON VERDE S/EXTRA (ARPILLA)'), (1, 'LIMON VERDE EXTRA (CAJA DE MADERA)'), (1, 'LIMON VERDE EXTRA (CAJA DE CARTON)'), (1, 'LIMON VERDE EXTRA (CAJA DE PLASTICO)'), (1, 'LIMON VERDE EXTRA (ARPILLA)'), (1, 'LIMON VERDE PREMIUM (CAJA DE MADERA)'), (1, 'LIMON VERDE PREMIUM (CAJA DE CARTON)'), (1, 'LIMON VERDE PREMIUM (CAJA DE PLASTICO)'), (1, 'LIMON VERDE PREMIUM (ARPILLA)'), (1, 'LIMON VERDE MIXTO (CAJA DE MADERA)'), (1, 'LIMON VERDE MIXTO (CAJA DE PLASTICO)'), (1, 'LIMON VERDE 300 (PLASTICO)'), (1, 'LIMON VERDE 300 (ARPILLA)'), (1, 'LIMON VERDE MIXTO (ARPILLA)'), (1, 'LIMON VERDE SE(CAJA MADERA 24K)'), (1, 'LIMON VERDE 4 Y 5 (CAJA MADERA 24K)'), (1, 'LIMON VERDE 400 (MADERA )'), (1, 'LIMON VERDE 400 ( PLASTICO)'), (1, 'LIMON VERDE No. 5 (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 5 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 5 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 5 (ARPILLA)'), (1, 'LIMON VERDE No. 4 (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 4 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 4 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 4 (ARPILLA)'), (1, 'LIMON VERDE No. 3 (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 3 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 3 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 3 (ARPILLA)'), (1, 'LIMON VERDE No. 2  (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 2  (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 2  (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 2  (ARPILLA)'), (1, 'LIMON VERDE ECONOMICO  (CAJA DE MADERA)'), (1, 'LIMON VERDE ECONOMICO  (CAJA DE CARTON)'), (1, 'LIMON VERDE ECONOMICO  (CAJA DE PLASTICO)'), (1, 'LIMON VERDE ECONOMICO  (ARPILLA)'), (1, 'LIMON VERDE No. 2,3 (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 2,3 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 2,3 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 2,3 (ARPILLA)'), (1, 'LIMON VERDE No. 3,4 (CAJA DE MADERA)'), (1, 'LIMON VERDE No. 3,4 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 3,4 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 3,4 (ARPILLA)'), (1, 'LIMON VERDE No. 4,5 (CAJA DE MADERA)'), (1, 'LIMON VERDE 400 ( ARPILLA )'), (1, 'LIMON VERDE No. 4,5 (CAJA DE CARTON)'), (1, 'LIMON VERDE No. 4,5 (CAJA DE PLASTICO)'), (1, 'LIMON VERDE No. 4,5 (ARPILLA)'), (1, 'LIMON VERDE BOLICON (ARPILLA)'), (1, 'LIMON VERDE CANICA ( ARPILLA )'), (1, 'LIMON VERDE 600 ( MADERA )'), (1, 'LIMON VERDE 600 ( PLASTICO)'), (1, 'LIMON VERDE ESPECIAL (CAJA DE MADERA)'), (1, 'LIMON VERDE 350 ( PLASTICO )'), (1, 'LIMON VERDE ESPECIAL (CAJA DE CARTON)'), (1, 'LIMON VERDE ESPECIAL (CAJA DE PLASTICO)'), (1, 'LIMON VERDE ESPECIAL (ARPILLA)'), (1, 'LIMON ALIMONADO 4 Y 5 (ARPILLA)'), (1, 'LIMON VERDE 500 ( MADERA )'), (1, 'LIMON ALIMONADO 400 (CAJA DE MADERA )'), (1, 'LIMON ALIMONADO 400 ( CAJA DE PLASTICO )'), (1, 'LIMON VERDE 350 ( MADERA )'), (1, 'LIMON ALIMONADO VERDE ECONOMICO ( ARPILLA )'), (1, 'LIMON VERDE 350 ( ARPILLA )'), (1, 'LIMON VERDE 300 ( MADERA )'), (1, 'ALIMONADO CLARO ECONOMICO ( ARPILLA )'), (1, 'LIMON VERDE No.600 ARPILLITA(PLASTICO_)'), (1, 'LIMON ALIMONADO MIXTO (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO MIXTO (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO MIXTO (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO MIXTO (ARPILLA)'), (1, 'LIMON ALIMONADO PREMIUM (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO PREMIUM (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO PREMIUM (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO PREMIUM (ARPILLA)'), (1, 'LIMON ALIMONADO CLARO (ARPILLA)'), (1, 'LIMON ALIMONADO VERDE (ARPILLA)'), (1, 'LIMON ALIMONADO VERDE ( CAJA DE MADERA )'), (1, 'LIMON ALIMONADO No. 5 (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO No. 5 (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO No. 5 (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO No. 5 (ARPILLA)'), (1, 'LIMON ALIMONADO No. 4 (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO No. 4 (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO No. 4 (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO No. 4 (ARPILLA)'), (1, 'LIMON ALIMONADO No. 3 (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO No. 3 (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO No. 3 (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO No. 3 (ARPILLA)'), (1, 'LIMON ALIMONADO No. 2 (CAJA DE MADERA)'), (1, 'LIMON ALIMONADO No. 2 (CAJA DE CARTON)'), (1, 'LIMON ALIMONADO No. 2 (CAJA DE PLASTICO)'), (1, 'LIMON ALIMONADO No. 2 (ARPILLA)'), (1, 'LIMON ALIMONADO ESPECIAL (MADERA))'), (1, 'LIMON ALIMONADO ECON.(ARPILLA)'), (1, 'LIMON ALIMONADO ECONOMICO NO. 2 (ARPILLA)'), (1, 'LIMON VERDE ECON No. 3 ( ARPILLA )'), (1, 'LIMON VERDE ECON. No. 4  ( ARPILLA )'), (1, 'LIMON VERDE ECON. No. 5 ( ARPILLA )'), (1, 'LIMON ALIMONADO VERDE ( PLASTICO )'), (1, 'LIMON VERDE 500 (ARPILLA)'), (1, 'LIMON AMARILLO (ARPILLA)'), (1, 'LIMON AMARILLO No. 5 (ARPILLA)'), (1, 'LIMON AMARILLO MIXTO (ARPILLA)'), (1, 'LIMON AMARILLO ECONOMICO (ARPILLA)'), (1, 'LIMON AMARILLO ECON.(ARPILLA)'), (1, 'LIMON AMARILLO VERDE (ARPILLA )'), (1, 'LIMON AMARILLO CLARO ( ARPILLA )'), (1, 'LIMON VERDE 600 (ARPILLA)'), (1, 'LIMON COLIMA PLASTICO'), (1, 'LIMON ARPILLA'), (1, 'KGS. LIMON VERDE NO. 2'), (1, 'KGS. DE LIMON INDUSTRIAL'), (1, 'KGS. DE LIMON AMARILLO INDUSTRIAL'), (1, 'BONIFICACION LIMON INDUSTRIAL (KGS)'), (1, 'KGS. DE LIMON DE SUELO'), (1, 'LIMON VERDE #3 ARPILLITA (PLASTICO)'), (1, 'LIMON VERDE #2 ARPILLITA (PLASTICO)'), (1, 'LIMON VERDE 500(PLASTICO)'), (1, 'LIMON VERDE 700 (PLASTICO)'), (1, 'KGS.LIMON VERDE 500(PLASTICO)'), (1, 'KGS LIMON VERDE 400(PLASTICO)'), (1, 'KGS LIMON VERDE 400(PLASTICO)'), (1, 'LIMON VERDE MIXTO 300 (MADERA)'), (1, 'LIMON VERDE 700(ARPILLA)'), (1, 'LIMON AMARILLO (PLASTICO)'), (1, 'LIMON VERDE 550 (PLASTICO)'), (1, 'LIMON VERDE N0. 550 ARPILLITA (PLASTICO)'), (1, 'LIMON VERDE 550 ARPILLA');


2013-07-08
  ✔ Rastreabilidad, poner boton que salga un modal y pida No de lote y un check que indique si el chofer es el nombre del productor () va a modificar la boleta pero solo esos campos nuevos (me dices para explicarte mejor) @done (13-07-08 11:25)
  ✔ Rastreabilidad, reporte como el xls que hace rosy @done (13-07-06 14:17)
  ✔ Rastreabilidad, reporte como el del ingeniero @done (13-07-07 11:41)
  ✔ Rastreabilidad, rendimiento por lote, Es registrar cuantos cajas salen por lote de las clasificaciones, se crea un cosiecutivo de lotes por dia @done (13-07-15 18:38)
  ✔ Rastreabilidad, Armado de pallets, crear pallet de una clasificacion, agregarle las cajas disponibles de esa clasificacion hasta juntar el numero de cajas indicadas, cuandos se agregan cajas en rendimiento por lote agregar esas cajas a los pallets abiertos (que aun no acompleten sus cajas) @done (13-07-15 18:38)
  ☐ Ir viendo lo de la bitacora de operaciones
  ☐ Lo de los choferes en salidas de carros para imprimir la constancia

  ✔ SQL @done (13-07-12 16:21)
    Privilegios Rastreabilidad
    "Rastreabilidad";0;TRUE;"rastreabilidad/";"bullseye";FALSE
    "Rastreabilidad del producto";61;TRUE;"rastreabilidad/rrp/";"print";TRUE
    "Reporte Entrada de Fruta";61;TRUE;"rastreabilidad/ref/";"print";FALSE
    "Pallets";61;TRUE;"rastreabilidad_pallets/";"th-large";FALSE
    "Agregar Pallets";64;TRUE;"rastreabilidad_pallets/agregar/";"plus";FALSE
    "Modificar";64;FALSE;"rastreabilidad_pallets/modificar/";"edit";FALSE
    "Rendimiento por lote";57;TRUE;"rastreabilidad/rendimiento_lote/";"bar-chart";FALSE


    CREATE OR REPLACE VIEW rastria_cajas_libres AS
     SELECT rrc.id_rendimiento, rrc.id_clasificacion, rrc.rendimiento, COALESCE(rpr.cajas, 0::bigint) AS cajas, rrc.rendimiento - COALESCE(rpr.cajas, 0::bigint) AS libres
       FROM rastria_rendimiento_clasif rrc
       LEFT JOIN ( SELECT rastria_pallets_rendimiento.id_rendimiento, rastria_pallets_rendimiento.id_clasificacion, sum(rastria_pallets_rendimiento.cajas) AS cajas
               FROM rastria_pallets_rendimiento
              GROUP BY rastria_pallets_rendimiento.id_rendimiento, rastria_pallets_rendimiento.id_clasificacion) rpr ON rrc.id_rendimiento = rpr.id_rendimiento AND rrc.id_clasificacion = rpr.id_clasificacion
      WHERE (rrc.rendimiento - COALESCE(rpr.cajas, 0::bigint)) > 0;
    ALTER TABLE rastria_cajas_libres OWNER TO programa;

    CREATE OR REPLACE VIEW rastria_pallets_lista AS
     SELECT rp.id_pallet, rp.id_clasificacion, rp.folio, date(rp.fecha) AS fecha, rp.no_cajas, rp.status, c.nombre, COALESCE(sum(rpr.cajas), 0::bigint) AS cajas, rp.no_cajas - COALESCE(sum(rpr.cajas), 0::bigint) AS cajas_faltantes
       FROM rastria_pallets rp
       LEFT JOIN rastria_pallets_rendimiento rpr ON rp.id_pallet = rpr.id_pallet
       JOIN clasificaciones c ON c.id_clasificacion = rp.id_clasificacion
      GROUP BY rp.id_pallet, rp.id_clasificacion, rp.folio, rp.fecha, rp.no_cajas, rp.status, c.nombre
      ORDER BY rp.folio;
    ALTER TABLE rastria_pallets_lista OWNER TO programa;

3013-07-04
  ✔ Checar lo de las horas de entrada y salida en los tickets y modificar la fecha @done (13-07-05 18:13)
  ✔ Fuente del ticket un poco mas grande la parte de arriba @done (13-07-05 18:13)
  ✔ Que no salga el mensaje de que el folio no existe cuando sea una pesada diferente a la de fruta @done (13-07-05 18:13)
  ✔ En el ticket las cajas que salgan en el orden como se agregaron ordenarlas por el num_registro @done (13-07-05 08:49)
  ✔ Poder agregar varias calidades del mismo tipo en un ticket para ponerle diferente precio a las cajas @done (13-07-05 08:49)
  ✔ SQL Rastriabilidad @done (13-07-11 07:45)
    Agregar campo en tabla bascula_compra
      num_registro integer NOT NULL DEFAULT 0
      eliminar y agregar el primary key con el num_registro


      CREATE TABLE rastria_rendimiento
      (
        id_rendimiento bigserial NOT NULL,
        lote integer NOT NULL DEFAULT 1,
        fecha timestamp with time zone NOT NULL,
        status boolean NOT NULL DEFAULT true,
        CONSTRAINT rastria_rendimiento_pkey PRIMARY KEY (id_rendimiento)
      )
      WITH (
        OIDS=FALSE
      );
      ALTER TABLE rastria_rendimiento OWNER TO programa;

      CREATE TABLE rastria_rendimiento_clasif
      (
        id_rendimiento bigint NOT NULL,
        id_clasificacion integer NOT NULL,
        existente integer NOT NULL DEFAULT 0,
        linea1 integer NOT NULL DEFAULT 0,
        linea2 integer NOT NULL DEFAULT 0,
        total integer NOT NULL DEFAULT 0,
        rendimiento integer NOT NULL DEFAULT 0,
        CONSTRAINT rastria_rendimiento_clasif_pkey PRIMARY KEY (id_rendimiento, id_clasificacion),
        CONSTRAINT rastria_rendimiento_clasif_id_clasificacion_fkey FOREIGN KEY (id_clasificacion)
            REFERENCES clasificaciones (id_clasificacion) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT rastria_rendimiento_clasif_id_rendimiento_fkey FOREIGN KEY (id_rendimiento)
            REFERENCES rastria_rendimiento (id_rendimiento) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE
      )
      WITH (
        OIDS=FALSE
      );
      ALTER TABLE rastria_rendimiento_clasif OWNER TO programa;

      CREATE TABLE rastria_pallets
      (
        id_pallet bigserial NOT NULL,
        id_clasificacion integer NOT NULL,
        id_cliente bigint,
        folio bigint NOT NULL,
        fecha timestamp with time zone NOT NULL DEFAULT now(),
        no_cajas integer NOT NULL DEFAULT 0,
        status boolean NOT NULL DEFAULT true,
        CONSTRAINT rastria_pallets_pkey PRIMARY KEY (id_pallet),
        CONSTRAINT rastria_pallets_id_clasificacion_fkey FOREIGN KEY (id_clasificacion)
            REFERENCES clasificaciones (id_clasificacion) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE
      )
      WITH (
        OIDS=FALSE
      );
      ALTER TABLE rastria_pallets OWNER TO programa;

      CREATE TABLE rastria_pallets_rendimiento
      (
        id_pallet bigint NOT NULL,
        id_rendimiento bigint NOT NULL,
        id_clasificacion integer NOT NULL,
        fecha timestamp with time zone NOT NULL DEFAULT now(),
        cajas integer NOT NULL DEFAULT 0,
        CONSTRAINT rastria_pallets_rendimiento_pkey PRIMARY KEY (id_pallet, id_rendimiento, id_clasificacion),
        CONSTRAINT rastria_pallets_rendimiento_id_clasificacion_fkey FOREIGN KEY (id_clasificacion)
            REFERENCES clasificaciones (id_clasificacion) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT rastria_pallets_rendimiento_id_pallet_fkey FOREIGN KEY (id_pallet)
            REFERENCES rastria_pallets (id_pallet) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT rastria_pallets_rendimiento_id_rendimiento_fkey FOREIGN KEY (id_rendimiento)
            REFERENCES rastria_rendimiento (id_rendimiento) MATCH SIMPLE
            ON UPDATE CASCADE ON DELETE CASCADE
      )
      WITH (
        OIDS=FALSE
      );
      ALTER TABLE rastria_pallets_rendimiento OWNER TO programa;


2013-07-02
  ✔ Al calcular los kilos que no ponga decimales que se trunken @done (13-07-02 12:37)
  ✔ Poner un boton de tara para que cargue los kilos de tara (como si fuera el alt+t), en la parte de arriba, que salga solo cuando se captura el tara @done (13-07-02 17:50)
  ✔ Al modificar desde el listado que los kilos brutos y kilos tara no tengan los eventos de obtener los kilos y que en kilos brutos al perder el foco no se envie el formulario @done (13-07-02 17:57)
  ✔ folios de las boletas que puedan dejar libres que no siempre sea el consecutivo pero si validar que no se repitan -- @done (13-07-02 16:39)
  ✔ poner el boton de imprimir en la parte de abajo tambien @done (13-07-02 17:59)
  ✔ en el input de cajas prestadas si se pone . y se da guardar marca error @done (13-07-02 18:00)
  ✔ Por cada area manejan un folio diferente y si es entrada o salida tambien (preguntar) -- @done (13-07-02 17:38)
  ✔ Poder modificar el precio directamente en la tabla de cajas agregadas @done (13-07-02 18:39)
  ☐ que no deje agregar choferes si el nombre es igual
  ✔ cambiar el logo @done (13-07-02 09:21)

  ✔ SQL @done (13-07-11 07:47)
    Agregar campos en tabla bascula
    no_lote integer, -- numero de lote para rastreabilidad
    chofer_es_productor boolean NOT NULL DEFAULT false, -- Rastreabilidad; si es true el chofer es el nombre de productor, si es false es nombre de chofer
